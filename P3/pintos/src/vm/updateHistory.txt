/* v1.0
实现frametable的数据结构设计和基本管理（初始化，申请和释放）
根据官方文档，也修改了process.c中的load_segment，将其修改为我设计的页框管理函数 
*/
/*v1.1添加了辅助页表管理（创建），并在thread里加了spt属性，在有pagedir创建和删除的地方加了相应的spt操作*/
/*v1.2
1.添加了辅助页表管理set page，和 page status。在process.c install_page应用
2.修改了文件结构.
3.根据官方文档,修改process.c setup_stack:以便在加载可执行文件和设置其堆栈(setup_stack)时在补充页表中记录必要的信息。在页面故障处理程序中实现代码和数据段的加载。现在，只考虑有效的访问。
4.补充页表最重要的用户是缺页处理程序。在项目 2 中，页面错误总是表示内核或用户程序中的错误。在项目 3 中，情况不再如此。现在，页面错误可能仅表示必须从文件或交换中引入该页面。您将不得不实现一个更复杂的页面错误处理程序来处理这些情况。您应该通过page_fault()在 userprog/exception.c 中修改来实现的页面错误处理程序需要大致执行以下操作：
4.1在补充页表中找到出错的页面。如果内存引用有效，则使用补充页表条目来定位进入该页面的数据，这些数据可能位于文件系统或交换槽中，也可能只是一个全零页面。如果实现共享，页面的数据甚至可能已经在页框中，但不在页表中。
如果
4.1.1补充页表表明用户进程不应该在它试图访问的地址处期待任何数据，
4.1.2或者如果页面位于内核虚拟内存中，
4.1.3或者如果访问是尝试写入只读页面，
那么访问无效。任何无效访问都会终止进程，从而释放其所有资源。
4.2获取一个框架来存储页面。详见4.1.5 管理帧表。
如果您实施共享，您需要的数据可能已经在一个框架中，在这种情况下，您必须能够定位该框架。
4.3通过从文件系统或交换中读取数据、将其归零等，将数据提取到帧中。
如果你实现了分享，你需要的页面可能已经在一个框架中，这种情况下这一步不需要任何操作。
4.4将故障虚拟地址的页表条目指向物理页。您可以使用userprog/pagedir.c 中的函数。
*/